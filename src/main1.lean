import tactic
import tactic.gptf
import data.complex.basic
import algebra.field
import data.matrix.notation
import algebra.big_operators.ring
import linear_algebra.matrix.nonsingular_inverse
import linear_algebra.matrix.trace
import linear_algebra.matrix.to_lin
import combinatorics.simple_graph.basic
--import analysis.normed_space.inner_product
--import algebra.big_operators.basic
--import linear_algebra.tensor_product
--import data.matrix.basic
--#check tensor_product
set_option pp.beta true

section one
variables {m n Œ± Œ≤: Type*} [fintype n] [fintype m]
variables [mul_one_class Œ±] [add_comm_monoid Œ±] [non_assoc_semiring Œ≤]
namespace matrix
open_locale big_operators

def vec_one [has_one Œ±] : n ‚Üí Œ± := Œª x, 1

@[simp] lemma dot_product_one (v : n ‚Üí Œ±) : dot_product v vec_one = ‚àë i, v i :=
by simp [dot_product, vec_one]

@[simp] lemma dot_product_one' (v : n ‚Üí Œ±) : dot_product v (Œª i, 1) = ‚àë i, v i :=
by simp [dot_product]

@[simp] lemma one_dot_product (v : n ‚Üí Œ±) : dot_product vec_one v = ‚àë i, v i :=
by simp [dot_product, vec_one]

@[simp] lemma one_dot_product' (v : n ‚Üí Œ±) : dot_product (Œª i, 1 : n ‚Üí Œ±) v = ‚àë i, v i :=
by simp [dot_product]

lemma one_dot_one_eq_card : dot_product (vec_one : n ‚Üí Œ±) vec_one = fintype.card n :=
by simp [dot_product, vec_one, fintype.card]

lemma one_dot_one_eq_card' : dot_product (Œª i, 1 : n ‚Üí Œ±) (Œª i, 1) = fintype.card n :=
by simp [dot_product, fintype.card]

@[simp] lemma mul_vector_one (A : matrix m n Œ≤) :
mul_vec A vec_one = Œª i, ‚àë j, A i j :=
by ext; simp [mul_vec, vec_one, dot_product]

@[simp] lemma mul_vector_one' (A : matrix m n Œ≤) :
mul_vec A (Œª i, 1) = Œª i, ‚àë j, A i j :=
by ext; simp [mul_vec, dot_product]

@[simp] lemma vector_one_mul (A : matrix m n Œ≤) :
vec_mul vec_one A = Œª j, ‚àë i, A i j :=
by ext; simp [vec_mul, vec_one, dot_product]

@[simp] lemma vector_one_mul' (A : matrix m n Œ≤) :
vec_mul (Œª j, 1 : m ‚Üí Œ≤) A = Œª j, ‚àë i, A i j :=
by ext; simp [vec_mul, dot_product]

#check finset.univ

end matrix
end one

----------------------------------------------------------------------------

variables {Œ± Œ≤ Œ≥ I J K L M N: Type*}
variables {ùîΩ : Type*} [field ùîΩ]
variables {R : Type*}
variables {m n p q r s t: ‚Ñï}
variables [fintype I] [fintype J] [fintype K] [fintype L] [fintype M] [fintype N]

----------------------------------------------------------------------------
/-
-- a missing lemma
lemma inv_of_eq_left_inv [monoid Œ±] {a b : Œ±} [invertible a] (hac : b * a = 1) :
‚Öüa = b := (left_inv_eq_right_inv  hac (mul_inv_of_self _)).symm
-/
----------------------------------------------------------------------------
example :(Œ± √ó (Œ≤ √ó Œ≥)) = (Œ± √ó Œ≤ √ó Œ≥) := rfl
--#check nat.add_assoc
instance prod_assoc : has_coe ((Œ± √ó Œ≤) √ó Œ≥) (Œ± √ó Œ≤ √ó Œ≥) := ‚ü®Œª ‚ü®‚ü®a,b‚ü©,c‚ü©, ‚ü®a,b,c‚ü©‚ü©
instance matrix.prod_assoc : has_coe (matrix (I √ó J √ó K) (L √ó M √ó N) Œ±) (matrix ((I √ó J) √ó K) ((L √ó M) √ó N) Œ±):=
‚ü®Œª M ‚ü®‚ü®a,b‚ü©,c‚ü© ‚ü®‚ü®d,e‚ü©,f‚ü©, M ‚ü®a,b,c‚ü© ‚ü®d,e,f‚ü©‚ü©


/- ## reindex and coercion -/
def reindex_prod_assoc : matrix ((I √ó J) √ó K) ((L √ó M) √ó N) Œ± ‚âÉ matrix (I √ó J √ó K) (L √ó M √ó N) Œ± :=
matrix.reindex (equiv.prod_assoc _ _ _) (equiv.prod_assoc _ _ _)
def reindex_prod_comm_fst : matrix I (J √ó K) Œ± ‚âÉ matrix I (K √ó J) Œ± :=
matrix.reindex (equiv.refl _) (equiv.prod_comm _ _)
def reindex_prod_comm_snd : matrix (I √ó J) K Œ± ‚âÉ matrix (J √ó I) K Œ± :=
matrix.reindex (equiv.prod_comm _ _) (equiv.refl _)
def reindex_prod_comm : matrix (I √ó J) (K √ó L) Œ± ‚âÉ matrix (J √ó I) (L √ó K) Œ± :=
matrix.reindex (equiv.prod_comm _ _) (equiv.prod_comm _ _)
/- ## end reindex and coercion -/

def equiv.perm.to_matrix [decidable_eq I] [has_zero Œ±] [has_one Œ±] (œÉ : equiv.perm I) : matrix I I Œ±
| i j := if œÉ i = j then 1 else 0

lemma equiv.perm.to_matrix_eq_to_prequiv_to_matrix [decidable_eq I] [has_zero Œ±] [has_one Œ±] (œÉ : equiv.perm I) :
(œÉ.to_pequiv.to_matrix : matrix I I Œ±)= œÉ.to_matrix :=
by ext i j; simp [pequiv.to_matrix, equiv.perm.to_matrix,equiv.to_pequiv]

#check matrix.det_permutation

namespace matrix
open_locale matrix big_operators
open complex

/-
/- ## inverse section -/
section inverse
variables [decidable_eq I] [comm_ring Œ±]
variables (A B: matrix I I Œ±)

lemma is_unit_det_of_invertible [invertible A] : is_unit A.det :=
by apply is_unit_det_of_left_inverse A (invertible.inv_of A) (inv_of_mul_self A)
#check is_unit_det_of_invertible

@[simp,norm]
lemma inv_eq_nonsing_inv_of_invertible [invertible A] : ‚Öü A = A‚Åª¬π :=
begin
  have ha:= is_unit_det_of_invertible A,
  have ha':= (is_unit_iff_is_unit_det A).2 ha,
  have h:= inv_of_mul_self A,
  have h':= nonsing_inv_mul A ha,
  rw ‚Üêh' at h,
  apply (is_unit.mul_left_inj ha').1 h,
end
#check inv_eq_nonsing_inv_of_invertible

variables {A} {B}

noncomputable
def invertible_of_is_unit_det  (h: is_unit A.det) : invertible A :=
‚ü®A‚Åª¬π, nonsing_inv_mul A h, mul_nonsing_inv A h‚ü©
#check invertible_of_is_unit_det

lemma inv_eq_right_inv (h : A ‚¨ù B = 1) : A‚Åª¬π = B :=
begin
  have h1 :=  (is_unit_det_of_right_inverse A B h),
  have h2 := invertible_of_is_unit_det h1,
  have := @inv_of_eq_right_inv (matrix I I Œ±) (infer_instance) A B h2 h,
  simp* at *,
end
#check inv_eq_right_inv

lemma inv_eq_left_inv (h : B ‚¨ù A = 1) : A‚Åª¬π = B :=
begin
  have h1 :=  (is_unit_det_of_left_inverse A B h),
  have h2 := invertible_of_is_unit_det h1,
  have := @inv_of_eq_left_inv (matrix I I Œ±) (infer_instance) A B h2 h,
  simp* at *,
end

variables {C: matrix I I Œ±}

lemma left_inv_eq_left_inv (h: B ‚¨ù A = 1) (g: C ‚¨ù A = 1) : B = C :=
by rw [‚Üê(inv_eq_left_inv h), ‚Üê(inv_eq_left_inv g)]

lemma right_inv_eq_right_inv (h: A ‚¨ù B = 1) (g: A ‚¨ù C = 1) : B = C :=
by rw [‚Üê(inv_eq_right_inv h), ‚Üê(inv_eq_right_inv g)]

lemma right_inv_eq_left_inv (h: A ‚¨ù B = 1) (g: C ‚¨ù A = 1) : B = C :=
by rw [‚Üê(inv_eq_right_inv h), ‚Üê(inv_eq_left_inv g)]

/-- We can construct an instance of invertible A if A has a left inverse. -/
def invertible_of_left_inverse (h: B ‚¨ù A = 1) : invertible A :=
‚ü®B, h, nonsing_inv_right_left h‚ü©

/-- We can construct an instance of invertible A if A has a right inverse. -/
def invertible_of_right_inverse (h: A ‚¨ù B = 1) : invertible A :=
‚ü®B, nonsing_inv_left_right h, h‚ü©

variable (A)

#check mul_nonsing_inv
@[simp] lemma mul_inv_of_invertible [invertible A] : A ‚¨ù A‚Åª¬π = 1 :=
mul_nonsing_inv A (is_unit_det_of_invertible A)

@[simp] lemma inv_mul_of_invertible [invertible A] : A‚Åª¬π ‚¨ù A = 1 :=
nonsing_inv_mul A (is_unit_det_of_invertible A)

end inverse
/- ## end inverse -/
-/

/- ## trace section -/
section trace
def tr [add_comm_monoid Œ±] (A : matrix I I Œ±) : Œ± := ‚àë i : I, A i i
lemma trace_eq_tr [semiring Œ≤] [add_comm_monoid Œ±] [module Œ≤ Œ±] (A : matrix I I Œ±)
: trace I Œ≤ Œ± A = tr A := rfl
end trace
/- ## end trace -/

/- ## conjugate transpose and symmetric -/
section conjugate_transpose

instance vec_has_star [has_star Œ±]: has_star (I ‚Üí Œ±) := ‚ü®Œª v i, star (v i)‚ü©

@[simp] lemma vec_star_ext [has_star Œ±] (v : I ‚Üí Œ±) (i : I) : star v i = star (v i) := rfl

def conj_transpose [has_star Œ±] (M : matrix I J Œ±) : matrix J I Œ±
| x y := star (M y x)

localized "postfix `·¥¥`:1500 := matrix.conj_transpose" in matrix

lemma conj_transpose_eq_star_of_square_matrix [decidable_eq I] [semiring Œ±] [star_ring Œ±] (M : matrix I I Œ±) :
M·¥¥ = star M := rfl

lemma trans_col_eq_row (A : matrix I J Œ±) (i : I) : (Œª j, A·µÄ j i) = A i :=
by simp [transpose]

lemma trans_row_eq_col (A : matrix I J Œ±) (j : J) : A·µÄ j = (Œª i, A i j):=
by ext; simp [transpose]

protected def is_sym (A : matrix I I Œ±) : Prop := A·µÄ = A
protected def is_skewsym [has_neg Œ±] (A : matrix I I Œ±) : Prop := -A·µÄ = A
protected def is_Hermitian [has_star Œ±] (A : matrix I I Œ±) : Prop := A·¥¥ = A

end conjugate_transpose
/- ## end conjugate transpose and symmetric-/


/- ## definite section -/
section definite
open_locale complex_order
protected def is_pos_def (M : matrix I I ‚ÑÇ):=
M.is_Hermitian ‚àß ‚àÄ v : I ‚Üí ‚ÑÇ, v ‚â† 0 ‚Üí 0 < dot_product v (M.mul_vec v)
protected def is_pos_semidef (M : matrix I I ‚ÑÇ):=
M.is_Hermitian‚àß ‚àÄ v : I ‚Üí ‚ÑÇ, 0 ‚â§ dot_product v (M.mul_vec v)
protected def is_neg_def (M : matrix I I ‚ÑÇ):=
M.is_Hermitian ‚àß ‚àÄ v : I ‚Üí ‚ÑÇ, v ‚â† 0 ‚Üí dot_product v (M.mul_vec v) < 0
protected def is_neg_semidef (M : matrix I I ‚ÑÇ):=
M.is_Hermitian ‚àß ‚àÄ v : I ‚Üí ‚ÑÇ, dot_product v (M.mul_vec v) ‚â§ 0
end definite
/- ## end definite -/

/- ## matrix rank section  -/
section rank
variables [decidable_eq J] [field Œ±]
protected noncomputable
def rank (A : matrix I J Œ±) := rank A.to_lin'
end rank
/- ## end matrix rank -/

/- ## orthogonal section  -/
section orthogonal
variable [decidable_eq I]
open_locale matrix
protected def is_ortho (A : matrix I I ‚Ñù) : Prop := A·µÄ ‚¨ù A = 1
protected def is_uni (A : matrix I I ‚ÑÇ) : Prop := A·¥¥ ‚¨ù A = 1
lemma is_ortho_left_right (A : matrix I I ‚Ñù) : A.is_ortho ‚Üî A ‚¨ù A·µÄ = 1 :=
‚ü®nonsing_inv_right_left, nonsing_inv_left_right‚ü©
lemma is_uni_left_right (A : matrix I I ‚ÑÇ) : A.is_uni ‚Üî A ‚¨ù A·¥¥ = 1 :=
‚ü®nonsing_inv_right_left, nonsing_inv_left_right‚ü©
lemma is_ortho_iff_orthonormal_cols (A : matrix I I ‚Ñù) :
matrix.is_ortho A ‚Üî ‚àÄ j‚ÇÅ j‚ÇÇ, dot_product (Œª i, A i j‚ÇÅ) (Œª i, A i j‚ÇÇ) = ite (j‚ÇÅ = j‚ÇÇ) 1 0 :=
begin
  simp [matrix.is_ortho,matrix.mul,has_one.one, diagonal],
  split,
  { intros h j‚ÇÅ j‚ÇÇ,
    exact congr_fun (congr_fun h j‚ÇÅ) j‚ÇÇ,
  },
  { intros h, ext, apply h _ _},
end
lemma is_ortho_iff_orthonormal_row (A : matrix I I ‚Ñù) :
matrix.is_ortho A ‚Üî ‚àÄ i‚ÇÅ i‚ÇÇ, dot_product (A i‚ÇÅ) (A i‚ÇÇ) = ite (i‚ÇÅ = i‚ÇÇ) 1 0 :=
begin
  rw is_ortho_left_right,
  simp [matrix.is_ortho,matrix.mul,has_one.one, diagonal],
  split,
  { intros h i‚ÇÅ i‚ÇÇ,
    exact congr_fun (congr_fun h i‚ÇÅ) i‚ÇÇ,
  },
  { intros h, ext, apply h _ _},
end
end orthogonal
/- ## end orthogonal -/

/- ## permutation matrix -/
section perm
open equiv
section defns
variables [decidable_eq I] [has_zero Œ±] [has_one Œ±]

protected def is_perm (P : matrix I I Œ±) : Prop :=
‚àÉ œÉ : equiv.perm I, P = perm.to_matrix œÉ
protected def is_perfect_shuffle (P : matrix I I Œ±) : Prop :=
‚àÉ œÉ : equiv.perm I, (P = perm.to_matrix œÉ ‚àß ‚àÄ i : I, œÉ i ‚â† i)
protected def is_perm' (P : matrix I I Œ±) : Prop :=
(‚àÄ i, ‚àÉ! j, ‚àÄ j', ite (j' = j) (P i j' = 1) (P i j' = 0)) ‚àß
(‚àÄ j, ‚àÉ! i, ‚àÄ i', ite (i' = i) (P i' j = 1) (P i' j = 0))

lemma is_perm_of_is_perfect_shuffle (P : matrix I I Œ±) : P.is_perfect_shuffle ‚Üí P.is_perm :=
by {intro h, rcases h with ‚ü®œÉ, rfl, h2‚ü©, use œÉ}
lemma is_perm_of_is_perm' {P : matrix I I Œ±} (h : P.is_perm'): P.is_perm :=
sorry
lemma is_perm'_of_is_perm {P : matrix I I Œ±} (h : P.is_perm): P.is_perm' :=
sorry
lemma is_perm_iff_is_perm' (P : matrix I I Œ±) : P.is_perm ‚Üî P.is_perm' :=
‚ü®is_perm'_of_is_perm, is_perm_of_is_perm'‚ü©

def std := {v : I ‚Üí Œ±| ‚àÉ! (i : I), ‚àÄ j : I, ite (j = i) (v j = 1) (v j = 0)}

end defns

lemma bij_on_std_of_is_perm [non_assoc_semiring Œ±] [decidable_eq I] (P : matrix I I Œ±) (h : P.is_perm) :
set.bij_on (Œª v, P.mul_vec v) std std :=
begin
  rcases h with ‚ü®œÉ, rfl‚ü©,
  split,
  {
    intros v hv,
    simp [std, perm.to_matrix, mul_vec, dot_product] at *,
    rcases hv with ‚ü®i, ‚ü®h1, h2‚ü©‚ü©,
    use œÉ.inv_fun i,
    sorry
  },
  sorry
end

#check set.bijective_iff_bij_on_univ
--#check subtype.inj_on
#check set.inj_on
def pp : ‚Ñï ‚Üí Prop := Œª x, x=1 ‚à® x=2
#check pp
#check subtype pp
#check subtype.val
#check fin
#check semigroup
end perm
/- ## end permutation -/



/- ## matrix similarity section  -/
section similarity
variables [comm_ring Œ±] [decidable_eq I]
#check nonsing_inv
def similar_to (A B : matrix I I Œ±) := ‚àÉ (P : matrix I I Œ±), is_unit P.det ‚àß B = P‚Åª¬π ‚¨ù A ‚¨ù P
def similar_to' (A B : matrix I I Œ±) := ‚àÉ (P : matrix I I Œ±), is_unit P ‚àß B = P‚Åª¬π ‚¨ù A ‚¨ù P
def perm_similar_to (A B : matrix I I Œ±) := ‚àÉ (P : matrix I I Œ±), P.is_perm ‚àß B = P‚Åª¬π ‚¨ù A ‚¨ù P

localized "notation `‚àº`:50 := similar_to" in matrix
localized "notation `‚àº‚Çö`:50 := perm_similar_to" in matrix

lemma similar_to_iff_similar_to' (A B : matrix I I Œ±) : similar_to A B ‚Üî similar_to' A B :=
‚ü® by {rintros ‚ü®P ,h1, h2‚ü©, rw ‚Üêis_unit_iff_is_unit_det at h1, use‚ü®P ,h1, h2‚ü©},
  by {rintros ‚ü®P ,h1, h2‚ü©, rw is_unit_iff_is_unit_det at h1, use‚ü®P ,h1, h2‚ü©} ‚ü©

end similarity
/- ## end matrix similarity -/

/- ## others -/
lemma eq_of_empty [c: is_empty I] (M N: matrix I I Œ±) : M = N := 
by {ext, exfalso, apply is_empty_iff.mp c i}

lemma dot_product_block' [has_mul Œ±] [add_comm_monoid Œ±] (v w : I ‚äï J ‚Üí Œ±) : 
dot_product v w = ‚àë i, v (sum.inl i) * w (sum.inl i) + ‚àë j, v (sum.inr j) * w (sum.inr j) :=
begin
  rw [dot_product, ‚Üêfintype.sum_sum_elim],
  congr, 
  ext (i | j); simp 
end

lemma dot_product_block [has_mul Œ±] [add_comm_monoid Œ±] (v w : I ‚äï J ‚Üí Œ±) : 
dot_product v w = dot_product (Œª i, v (sum.inl i))  (Œª i, w (sum.inl i)) + dot_product (Œª j, v (sum.inr j))  (Œª j, w (sum.inr j)) :=
by simp [dot_product, dot_product_block']

/- ## end others -/

/- ## Hadamard product  -/
section Hadamard_product

def Hadamard [has_mul Œ±] (A : matrix I J Œ±) (B : matrix I J Œ±) :
matrix I J Œ± :=
Œª i j, (A i j) * (B i j)

localized "infix `‚äô`:100 := matrix.Hadamard" in matrix.Hadamard_product

/- The advantage of the following def is that one can directly #eval the Kronecker product of specific matrices-/
/- ## fin_Kronecker_prodcut  -/
@[elab_as_eliminator]
def fin_Kronecker_prodcut [has_mul Œ±]
(A : matrix (fin m) (fin n) Œ±) (B : matrix (fin p) (fin q) Œ±)
: matrix (fin (m * p)) (fin (n * q)) Œ± :=
Œª i j,
A ‚ü®(i / p), by {have h:= i.2, simp [mul_comm m] at *, apply nat.div_lt_of_lt_mul h}‚ü© 
  ‚ü®(j / q), by {have h:= j.2, simp [mul_comm n] at *, apply nat.div_lt_of_lt_mul h}‚ü© 
*
B ‚ü®(i % p), by {cases p, linarith [i.2], apply nat.mod_lt _ (nat.succ_pos _)}‚ü©
  ‚ü®(j % q), by {cases q, linarith [j.2], apply nat.mod_lt _ (nat.succ_pos _)}‚ü© 
localized "infix `‚äó‚Çñ'`:100 := matrix.fin_Kronecker_prodcut" in matrix
section notations
def matrix_empty : matrix (fin 0) (fin 0) Œ± := Œª x, ![]
localized "notation `!![]` := matrix.matrix_empty" in matrix
example : (!![]: matrix (fin 0) (fin 0) Œ±) = ![] :=
  by {ext, have h:= x.2, simp* at *}
end notations
section examples
open_locale matrix
def ex1:= ![![1, 2], ![3, 4]]
def ex2:= ![![0, 5], ![6, 7]]
def ex3:= ![![(1:‚Ñ§), -4, 7], ![-2, 3, 3]]
def ex4:= ![![(8:‚Ñ§), -9, -6, 5], ![1, -3, -4, 7], ![2, 8, -8, -3], ![1, 2, -5, -1]]
#eval (!![]: matrix (fin 0) (fin 0) ‚Ñï) #eval ex3 ‚äó‚Çñ' ex4 
#eval ex1 ‚äó‚Çñ' ex2 #eval 2 ‚Ä¢ (ex1 ‚äó‚Çñ' ex2) #eval ex2 ‚äó‚Çñ' ![![]]
#eval ![![]] ‚äó‚Çñ' ex2 #eval ex2 ‚äó‚Çñ' !![] #eval !![] ‚äó‚Çñ' ex2 
#eval ![![]] ‚äó‚Çñ' (![![]] :matrix (fin 1) (fin 0) ‚Ñï)
end examples
/- ## end fin_Kronecker_prodcut  -/

section basic_properties
variables (A : matrix I J Œ±) (B : matrix I J Œ±) (C : matrix I J Œ±)

section comm
variables [comm_semigroup Œ±]
lemma Had_comm : A ‚äô B = B ‚äô A := by ext; simp [Hadamard, mul_comm]
end comm

section assoc
variables [semigroup Œ±]
lemma Had_assoc : A ‚äô B ‚äô C = A ‚äô (B ‚äô C) :=
by ext; simp [Hadamard, mul_assoc]
end assoc

section distrib
variables [distrib Œ±]
lemma Had_add : A ‚äô (B + C) = A ‚äô B + A ‚äô C :=
by ext; simp [Hadamard, left_distrib]
lemma add_Had : (B + C) ‚äô A = B ‚äô A + C ‚äô A :=
by ext; simp [Hadamard, right_distrib]
end distrib

section scalar
variables [has_mul Œ±] [has_scalar R Œ±] [is_scalar_tower R Œ± Œ±] [smul_comm_class R Œ± Œ±]
variables (k : R)
private lemma aux_smul_mul_assoc (x y : Œ±) :
(k ‚Ä¢ x) * y = k ‚Ä¢ (x * y) := smul_assoc k x y
private lemma aux_mul_smul_comm (x y : Œ±) :
x * (k ‚Ä¢ y) = k ‚Ä¢ (x * y) := (smul_comm k x y).symm
@[simp] lemma smul_Had : (k ‚Ä¢ A) ‚äô B = k ‚Ä¢ A ‚äô B :=
  by ext; simp [Hadamard, aux_smul_mul_assoc]
@[simp] lemma Had_smul : A ‚äô (k ‚Ä¢ B) = k ‚Ä¢ A ‚äô B :=
  by ext; simp [Hadamard, aux_mul_smul_comm]
end scalar

section zero
variables [mul_zero_class Œ±]
@[simp] lemma Had_zero : A ‚äô (0 : matrix I J Œ±) = 0 :=
by ext; simp [Hadamard]
@[simp] lemma Had_zero' : A ‚äô ((Œª _ _, 0):matrix I J Œ±) = 0 :=
Had_zero A
@[simp] lemma zero_Had : (0 : matrix I J Œ±) ‚äô A = 0 :=
by ext; simp [Hadamard]
@[simp] lemma zero_Had' : ((Œª _ _, 0):matrix I J Œ±) ‚äô A = 0 :=
zero_Had A
end zero

section trace
open_locale matrix
variables [comm_semiring Œ±] [decidable_eq I] [decidable_eq J]

@[simp] private lemma conj_ite {p : Prop} {z‚ÇÅ z‚ÇÇ : ‚ÑÇ} [decidable p] :
conj (ite p z‚ÇÅ z‚ÇÇ) = ite p (conj z‚ÇÅ) (conj z‚ÇÇ) :=
apply_ite ‚áëconj p z‚ÇÅ z‚ÇÇ

lemma tr_identity (v : I ‚Üí Œ±) (w : J ‚Üí Œ±) (M‚ÇÅ : matrix I J Œ±) (M‚ÇÇ : matrix I J Œ±):
dot_product (vec_mul  v  (M‚ÇÅ ‚äô M‚ÇÇ)) w =
tr ((diagonal v)·µÄ ‚¨ù M‚ÇÅ ‚¨ù (diagonal w) ‚¨ù M‚ÇÇ·µÄ) :=
begin
  simp [dot_product, vec_mul, Hadamard, finset.sum_mul],
  rw finset.sum_comm,
  apply finset.sum_congr, refl, intros i hi,
  simp [diagonal, transpose, matrix.mul, dot_product],
  apply finset.sum_congr, refl, intros j hj,
  ring,
end

lemma trace_identity (v : I ‚Üí Œ±) (w : J ‚Üí Œ±) (M‚ÇÅ : matrix I J Œ±) (M‚ÇÇ : matrix I J Œ±):
dot_product (vec_mul  v  (M‚ÇÅ ‚äô M‚ÇÇ)) w =
trace I Œ± Œ± ((diagonal v)·µÄ ‚¨ù M‚ÇÅ ‚¨ù (diagonal w) ‚¨ù M‚ÇÇ·µÄ) :=
by rw [trace_eq_tr, tr_identity]

lemma sum_Had_eq_tr_mul (M‚ÇÅ : matrix I J Œ±) (M‚ÇÇ : matrix I J Œ±) :
‚àë (i : I) (j : J), (M‚ÇÅ ‚äô M‚ÇÇ) i j = tr (M‚ÇÅ ‚¨ù M‚ÇÇ·µÄ) :=
begin
  have h:= tr_identity (Œª i, 1 : I ‚Üí Œ±) (Œª i, 1 : J ‚Üí Œ±) M‚ÇÅ M‚ÇÇ,
  simp at h,
  rw finset.sum_comm at h,
  assumption,
end

lemma tr_identity_over_‚ÑÇ (v : I ‚Üí ‚ÑÇ) (w : J ‚Üí ‚ÑÇ) (M‚ÇÅ : matrix I J ‚ÑÇ) (M‚ÇÇ : matrix I J ‚ÑÇ):
dot_product (vec_mul (star v)  (M‚ÇÅ ‚äô M‚ÇÇ)) w =
tr ((diagonal v)·¥¥ ‚¨ù M‚ÇÅ ‚¨ù (diagonal w) ‚¨ù M‚ÇÇ·µÄ) :=
begin
  simp [dot_product, vec_mul, Hadamard, finset.sum_mul],
  rw finset.sum_comm,
  apply finset.sum_congr, refl, intros i hi,
  simp [diagonal, transpose, conj_transpose, matrix.mul, dot_product, star, has_star.star],
  apply finset.sum_congr, refl, intros j hj,
  ring_nf,
end

lemma trace_identity_over_‚ÑÇ (v : I ‚Üí ‚ÑÇ) (w : J ‚Üí ‚ÑÇ) (M‚ÇÅ : matrix I J ‚ÑÇ) (M‚ÇÇ : matrix I J ‚ÑÇ):
dot_product (vec_mul (star v)  (M‚ÇÅ ‚äô M‚ÇÇ)) w =
trace I ‚ÑÇ ‚ÑÇ ((diagonal v)·¥¥ ‚¨ù M‚ÇÅ ‚¨ù (diagonal w) ‚¨ù M‚ÇÇ·µÄ) :=
by rw [trace_eq_tr, tr_identity_over_‚ÑÇ]

end trace

section rank
variables [decidable_eq J] [field Œ±]
theorem rank_Had_le_rank_mul :
matrix.rank (A ‚äô B) ‚â§ A.rank  * B.rank := sorry
end rank

end basic_properties

section psd
open_locale complex_order
variables {A B : matrix I I ‚ÑÇ}
variables (ha : A.is_pos_semidef) (hb : B.is_pos_semidef)
--Schur_product_theorem
theorem Hadamard.is_pos_semidef_of_is_pos_semidef : (A ‚äô B).is_pos_semidef :=
sorry
--#check det
variable [decidable_eq I]
theorem det_Had_ge_det_mul_of_psd : ((A ‚äô B).det) ‚â• (A.det) * (B.det) :=
sorry
end psd

end Hadamard_product
/- ## end Hadamard product  -/
----------------------------------------------------------------------

/- ## Kronecker product  -/
section Kronecker_product

open_locale matrix.Hadamard_product

@[elab_as_eliminator]
def Kronecker [has_mul Œ±] (A : matrix I J Œ±) (B : matrix K L Œ±) :
matrix (I √ó K)  (J √ó L) Œ± :=
Œª ‚ü®i, k‚ü© ‚ü®j, l‚ü©, (A i j) * (B k l)

localized "infix `‚äó`:100 := matrix.Kronecker" in matrix
--def emppty_matrix : matrix empty empty Œ± := Œª x, empty.rec (Œª (n : empty), Œ±)
--localized "notation `!![]` := matrix.emppty_matrix" in matrix

section one_K_one
variables [monoid_with_zero Œ±] [decidable_eq I] [decidable_eq J]
@[simp] lemma one_K_one : (1 :matrix I I Œ±) ‚äó (1 :matrix J J Œ±) = 1 :=
begin
  ext ‚ü®a,b‚ü© ‚ü®c,d‚ü©,
  simp [Kronecker],
  by_cases h: a = c,
  {by_cases g: b = d; simp* at *},
  simp* at *,
end
end one_K_one

section transpose
variables [has_mul Œ±]
(A : matrix I J Œ±) (B : matrix K L Œ±)
lemma K_transpose: (A ‚äó B)·µÄ = A·µÄ ‚äó B·µÄ :=
by ext ‚ü®a,b‚ü© ‚ü®c,d‚ü©; simp [transpose,Kronecker]
end transpose

section conj_transpose
open_locale matrix
variables [comm_monoid Œ±] [star_monoid Œ±] (M‚ÇÅ : matrix I J Œ±) (M‚ÇÇ : matrix K L Œ±)
lemma K_conj_transpose: (M‚ÇÅ ‚äó M‚ÇÇ)·¥¥ = M‚ÇÅ·¥¥ ‚äó M‚ÇÇ·¥¥:=
by ext ‚ü®a,b‚ü© ‚ü®c,d‚ü©; simp [conj_transpose,Kronecker, mul_comm]
#check matrix.trace_apply
end conj_transpose

section distrib
variables [distrib Œ±]
variables
(A : matrix I J Œ±)
(B : matrix K L Œ±)
(B' : matrix K L Œ±)
lemma K_add :A ‚äó (B + B') = A ‚äó B + A ‚äó B' :=
  by {ext ‚ü®a,b‚ü© ‚ü®c,d‚ü©, simp [Kronecker, left_distrib]}
lemma add_K :(B + B') ‚äó A = B ‚äó A + B' ‚äó A :=
  by {ext ‚ü®a,b‚ü© ‚ü®c,d‚ü©, simp [Kronecker, right_distrib]}
end distrib

section non_comm
#check matrix.is_perfect_shuffle
#check matrix.mul
variables [decidable_eq I] [decidable_eq K] [decidable_eq J] [decidable_eq L] [mul_one_class Œ±] [add_comm_monoid Œ±]
variables (A : matrix I J Œ±) (B : matrix K L Œ±)
lemma non_comm : ‚àÉ P Q,  B ‚äó A = reindex_prod_comm (P ‚¨ù (A ‚äó B) ‚¨ù Q) ‚àß P.is_perfect_shuffle ‚àß Q.is_perfect_shuffle :=
sorry
-- #check eq.rec_on

#check equiv.prod_comm
#check equiv.refl
end non_comm

section associativity
variables [semigroup Œ±]
variables (A : matrix I J Œ±) (B : matrix K L Œ±) (C : matrix M N Œ±)
lemma K_assoc : A ‚äó B ‚äó C = A ‚äó (B ‚äó C) :=
by {ext ‚ü®‚ü®a1, b1‚ü©, c1‚ü© ‚ü®‚ü®a2, b2‚ü©, c2‚ü©, simp[Kronecker, mul_assoc], refl}
end associativity

section zero
variables [mul_zero_class Œ±] (A : matrix I J Œ±)
@[simp] lemma K_zero : A ‚äó (0 : matrix K L Œ±) = 0 :=
by {ext ‚ü®a,b‚ü© ‚ü®c,d‚ü©, simp [Kronecker]}
@[simp] lemma K_zero' : A ‚äó ((Œª _ _, 0):matrix K L Œ±) = 0 :=
K_zero A
@[simp] lemma zero_K : (0 : matrix K L Œ±) ‚äó A = 0 :=
by {ext ‚ü®a,b‚ü© ‚ü®c,d‚ü©, simp [Kronecker]}
@[simp] lemma zero_K' : ((Œª _ _, 0):matrix K L Œ±) ‚äó A = 0 :=
zero_K A
end zero

section Kronecker_mul
variables [comm_ring Œ±]
variables
(A : matrix I J Œ±) (C : matrix J K Œ±)
(B : matrix L M Œ±) (D : matrix M N Œ±)
lemma K_mul: (A ‚äó B) ‚¨ù (C ‚äó D) = (A ‚¨ù C) ‚äó (B ‚¨ù D) :=
begin
  ext ‚ü®a,b‚ü© ‚ü®c,d‚ü©,
  simp [matrix.mul,dot_product,Kronecker,finset.sum_mul,finset.mul_sum],
  rw [‚Üêfinset.univ_product_univ,finset.sum_product],
  simp [Kronecker._match_1,Kronecker._match_2],
  rw finset.sum_comm,
  repeat {congr, ext},
  ring,
end
variables [decidable_eq I] [decidable_eq M] [decidable_eq L] [decidable_eq J]
@[simp] lemma id_K_mul: (1 ‚äó B) ‚¨ù (A ‚äó 1) = A ‚äó B := by simp [K_mul]
@[simp] lemma K_id_mul: (A ‚äó 1) ‚¨ù (1 ‚äó B) = A ‚äó B := by simp [K_mul]
end Kronecker_mul

section Kronecker_Hadamard
variables [comm_semigroup Œ±]
(A : matrix I J Œ±) (C : matrix I J Œ±)
(B : matrix K L Œ±) (D : matrix K L Œ±)
lemma Kronecker_Hadamard : (A ‚äó B) ‚äô (C ‚äó D) = (A ‚äô C) ‚äó (B ‚äô D) :=
begin
  ext ‚ü®a, b‚ü© ‚ü®c, d‚ü©,
  simp [Hadamard, Kronecker],
  rw ‚Üê mul_assoc,
  rw mul_assoc _ (B b d),
  rw mul_comm (B b d),
  simp [mul_assoc]
end
end Kronecker_Hadamard

section scalar
variables [has_mul Œ±] [has_scalar R Œ±] [is_scalar_tower R Œ± Œ±] [smul_comm_class R Œ± Œ±]
variables (k : R) (A : matrix I J Œ±) (B : matrix K L Œ±)
private lemma aux_smul_mul_assoc' (x y : Œ±) :
(k ‚Ä¢ x) * y = k ‚Ä¢ (x * y) := smul_assoc k x y
private  lemma aux_mul_smul_comm' (x y : Œ±) :
x * (k ‚Ä¢ y) = k ‚Ä¢ (x * y) := (smul_comm k x y).symm
@[simp] lemma smul_K : (k ‚Ä¢ A) ‚äó B = k ‚Ä¢ A ‚äó B :=
  by ext ‚ü®a,b‚ü© ‚ü®c,d‚ü©; simp [Kronecker, aux_smul_mul_assoc']
@[simp] lemma K_smul : A ‚äó (k ‚Ä¢ B) = k ‚Ä¢ A ‚äó B :=
  by ext ‚ü®a,b‚ü© ‚ü®c,d‚ü©; simp [Kronecker, aux_mul_smul_comm']
end scalar

section trace
variables [semiring Œ≤] [non_unital_non_assoc_semiring Œ±] [module Œ≤ Œ±]
variables (A : matrix I I Œ±) (B : matrix J J Œ±)
lemma trace_K: trace (I √ó J) Œ≤ Œ± (A ‚äó B) = (trace I Œ≤ Œ± A) * (trace J Œ≤ Œ± B) :=
begin
  simp[Kronecker, trace, ‚Üêfinset.univ_product_univ, finset.sum_product, 
       Kronecker._match_2,finset.sum_mul,finset.mul_sum],
  rw finset.sum_comm,
end
end trace

section inverse
--#check matrix.nonsing_inv
variables [decidable_eq I] [decidable_eq J] [comm_ring Œ±]
variables (A : matrix I I Œ±) (B : matrix J J Œ±) (C : matrix I I Œ±)
lemma K_inverse [invertible A] [invertible B] :(A ‚äó B)‚Åª¬π = A‚Åª¬π ‚äó B‚Åª¬π :=
begin
  suffices : (A‚Åª¬π ‚äó B‚Åª¬π) ‚¨ù (A ‚äó B) = 1,
  apply inv_eq_left_inv this,
  simp [K_mul],
end
@[simp] noncomputable
def Kronecker.invertible_of_invertible [invertible A] [invertible B] : invertible (A ‚äó B) :=
‚ü®A‚Åª¬π ‚äó B‚Åª¬π, by simp [K_mul], by simp [K_mul]‚ü©
@[simp] lemma Kronecker.unit_of_unit (ha : is_unit A) (hb : is_unit B) : is_unit (A ‚äó B) :=
@is_unit_of_invertible _ _ (A ‚äó B) (@Kronecker.invertible_of_invertible _ _ _ _ _ _ _ _ A B (is_unit.invertible ha) (is_unit.invertible hb))
end inverse

section symmetric
variables [has_mul Œ±]
@[simp] lemma Kronecker.is_sym_of_is_sym {A : matrix I I Œ±} {B : matrix J J Œ±} (ha: A.is_sym) (hb: B.is_sym) :
(A ‚äó B).is_sym := by simp [matrix.is_sym, K_transpose, *] at *
@[simp] lemma Kronecker.is_Hermitian_of_is_Hermitian {A : matrix I I ‚ÑÇ} {B : matrix J J ‚ÑÇ} (ha: A.is_Hermitian) (hb: B.is_Hermitian) :
(A ‚äó B).is_Hermitian := by simp [matrix.is_Hermitian, K_conj_transpose, *] at *
end symmetric

section pos_def
#check matrix.is_pos_def
@[simp]
lemma Kronecker.is_pos_def_of_is_pos_def {A : matrix I I ‚ÑÇ} {B : matrix J J ‚ÑÇ} (ha : A.is_pos_def) (hb : B.is_pos_def) :
(A ‚äó B).is_pos_def :=
begin
  /-
  simp [matrix.is_pos_def, *] at *,
  simp [dot_product, mul_vec] at *,
  intros v hv,
  simp [‚Üêfinset.univ_product_univ, finset.sum_product],
  simp [Kronecker,finset.mul_sum] at *,
  have h1 := ha.2,
  have h2 := hb.2,
  -/
  sorry -- I suspect there are more missing lemmas to get this
end
end pos_def

section ortho
variables  [decidable_eq I] [decidable_eq J]
@[simp] lemma Kronecker.is_ortho_of_is_ortho {A : matrix I I ‚Ñù} {B : matrix J J ‚Ñù} (ha : A.is_ortho) (hb : B.is_ortho) :
(A ‚äó B).is_ortho := by simp [matrix.is_ortho,  K_transpose, K_mul, ha, hb, *] at *
end ortho

section perm
open equiv

variables [decidable_eq I] [decidable_eq J] [mul_zero_one_class Œ±]
variables {A : matrix I I Œ±} {B : matrix J J Œ±}
@[simp] lemma Kronecker.is_perm_of_is_perm (ha : A.is_perm) (hb : B.is_perm) :
(A ‚äó B).is_perm :=
begin
  rcases ha with ‚ü®œÉ‚ÇÅ, rfl‚ü©,
  rcases hb with ‚ü®œÉ‚ÇÇ, rfl‚ü©,
  use prod_congr œÉ‚ÇÅ œÉ‚ÇÇ,
  ext ‚ü®a,b‚ü© ‚ü®c,d‚ü©,
  by_cases h1: œÉ‚ÇÅ a = c,
  all_goals {simp [*, perm.to_matrix, Kronecker]},
end
end perm

section det
variables [comm_ring Œ±] [decidable_eq I] [decidable_eq J]
variables
#check det
lemma K_det (A : matrix I I Œ±) (B : matrix J J Œ±) :
(A ‚äó B).det = (A.det)^(fintype.card J) * (B.det)^(fintype.card I) :=
sorry
lemma K_det' (A : matrix (fin n) (fin n) Œ±) (B : matrix (fin m) (fin m) Œ±) :
(A ‚äó B).det = (A.det)^m * (B.det)^n := by simp [K_det, fintype.card_fin]
end det

--Block matrices
--abstract properties

end Kronecker_product
/- ## end Kronecker product  -/

end matrix


----------------------------------------------- end of file
/- 
--#check
instance silly [ring Œ±] : has_scalar Œ± Œ± := ‚ü®ring.mul‚ü©



variables [has_zero Œ±] [has_one Œ±] [decidable_eq M]
--instance : has_one (matrix M M Œ±) :=sorry
#check matrix.has_one
#check (1 :matrix M M Œ±)

def ex1:= ![![(1:‚ÑÇ), 2], ![3, 4]]

#check star (1: ‚ÑÇ)

--#print has_star ‚ÑÇ




#check simple_graph

namespace test
private abbreviation S :set ‚Ñ§ := {-1, 1, 0}

def f : S ‚Üí ‚Ñï := sorry

#reduce ‚Ü•S
#check ‚Ü•S
#check subtype
#check monoid
#check {x : ‚Ñ§// x = -1 ‚à® x = 1 ‚à® x =  0}
#check has_coe_to_sort S
example: f =f := by obviously
#check simple_graph
end test

def complete_graph' (V : Type) : simple_graph V :=
‚ü® ne, by obviously, by tidy ‚ü© 
-/